require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SubCategoriesController, type: :controller do
  let(:valid_attributes) {
    {
      "utf8"=>"✓", 
      "authenticity_token"=>"9ZAoUUkfpR1AydhsivPuB/16x5u3Awdb/yVj7EdWo+pK4IeZP9aFXyThDFau8Epqdzv2tfOL+UnEEk48EsNoow==", 
      "commit"=>"Create Sub category",
      "sub_category"=>{"category_id"=>"8", "name"=>"a", "slug"=>"a"}.with_indifferent_access, 
      "fields"=>
        {
          "66823"=> {"order"=>"1", "title"=>"Description", "type"=>"textarea", "value"=>""},
          "66825"=>
            { "order"=>3,
              "title"=>"Qual é o tipo de evento?",
              "type"=>"select", 
              "values"=>"Bodas, Formatura, Aniversário - Adulto, Aniversário - Infantil, Debutante, Casamento, Evento corporativo, Outros"
            }
        }
    }.with_indifferent_access
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  let(:valid_session) { {} }

  describe "fields_params method" do
    it "with valid values" do 
      controller.params = {"fields"=>
        {"66823"=>
          { "order"=>3,
            "title"=>"Qual é o tipo de evento?",
            "type"=>"select", 
            "values"=>"Bodas, Formatura, Aniversário - Adulto, Aniversário - Infantil, Debutante, Casamento, Evento corporativo, Outros"
          }
        }
      }
      expect( controller.send(:fields_params).first["values"] ).to eq(["Bodas", "Formatura", "Aniversário - Adulto", "Aniversário - Infantil", "Debutante", "Casamento", "Evento corporativo", "Outros"])
    end
  end

  describe "GET #index" do
    it "assigns all sub_categories as @sub_categories" do
      sub_category = SubCategory.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:sub_categories)).to eq([sub_category])
    end
  end

  describe "GET #show" do
    it "assigns the requested sub_category as @sub_category" do
      sub_category = SubCategory.create! valid_attributes
      get :show, {:id => sub_category.to_param}, valid_session
      expect(assigns(:sub_category)).to eq(sub_category)
    end
  end

  describe "GET #new" do
    it "assigns a new sub_category as @sub_category" do
      get :new, {}, valid_session
      expect(assigns(:sub_category)).to be_a_new(SubCategory)
    end
  end

  describe "GET #edit" do
    it "assigns the requested sub_category as @sub_category" do
      sub_category = SubCategory.create! valid_attributes
      get :edit, {:id => sub_category.to_param}, valid_session
      expect(assigns(:sub_category)).to eq(sub_category)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new SubCategory" do
        #expect(response).to have_http_status(:created)
        #raise post(:create, {:sub_category => valid_attributes}).inspect
        expect {
          post :create, {:sub_category => valid_attributes}, valid_session
        }.to change(SubCategory, :count).by(1)
      end

      it "assigns a newly created sub_category as @sub_category" do
        post :create, {:sub_category => valid_attributes}, valid_session
        expect(assigns(:sub_category)).to be_a(SubCategory)
        expect(assigns(:sub_category)).to be_persisted
      end

      it "redirects to the created sub_category" do
        post :create, {:sub_category => valid_attributes}, valid_session
        expect(response).to redirect_to(SubCategory.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved sub_category as @sub_category" do
        post :create, {:sub_category => invalid_attributes}, valid_session
        expect(assigns(:sub_category)).to be_a_new(SubCategory)
      end

      it "re-renders the 'new' template" do
        post :create, {:sub_category => invalid_attributes}, valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested sub_category" do
        sub_category = SubCategory.create! valid_attributes
        put :update, {:id => sub_category.to_param, :sub_category => new_attributes}, valid_session
        sub_category.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested sub_category as @sub_category" do
        sub_category = SubCategory.create! valid_attributes
        put :update, {:id => sub_category.to_param, :sub_category => valid_attributes}, valid_session
        expect(assigns(:sub_category)).to eq(sub_category)
      end

      it "redirects to the sub_category" do
        sub_category = SubCategory.create! valid_attributes
        put :update, {:id => sub_category.to_param, :sub_category => valid_attributes}, valid_session
        expect(response).to redirect_to(sub_category)
      end
    end

    context "with invalid params" do
      it "assigns the sub_category as @sub_category" do
        sub_category = SubCategory.create! valid_attributes
        put :update, {:id => sub_category.to_param, :sub_category => invalid_attributes}, valid_session
        expect(assigns(:sub_category)).to eq(sub_category)
      end

      it "re-renders the 'edit' template" do
        sub_category = SubCategory.create! valid_attributes
        put :update, {:id => sub_category.to_param, :sub_category => invalid_attributes}, valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested sub_category" do
      sub_category = SubCategory.create! valid_attributes
      expect {
        delete :destroy, {:id => sub_category.to_param}, valid_session
      }.to change(SubCategory, :count).by(-1)
    end

    it "redirects to the sub_categories list" do
      sub_category = SubCategory.create! valid_attributes
      delete :destroy, {:id => sub_category.to_param}, valid_session
      expect(response).to redirect_to(sub_categories_url)
    end
  end

end
